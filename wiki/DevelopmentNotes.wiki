#summary Development notes on game engine quirks
#labels Phase-Implementation

= Introduction =

This Wiki is probably only going to be of use to developers... 


== Toggling the Debug Layer ==
_In FoFiX's main menu_, pressing *ALT + D* will toggle the Debug Layer on and off.  This layer provides real-time information on the inner workings of FoFiX, and could be of use to some advanced developers.

This should be togglable anywhere; except that further layers of menus and UIs have their own keyListeners and the ALT-D doesn't seem to make it all the way out to the FretsOnFire.py code.  

Although this is probably simple to fix (passing ALT-Ds back to the main keyListener, for example), it is not necessary... toggle it on in the Main Menu and then go play and watch it.  Restart the game or exit out to the main menu if you've seen enough.


== Image and Text Positioning ==
*Warning - this section is under development and the information is not entirely accurate yet!*

In the FoFiX game engine, images are positioned by their exact center. Text is positioned by it's upper left corner, with a small margin.  

Also, text "Y" coordinates are scaled for the full pixel WIDTH, not height as one might expect.  Nothing surprising or strange about how images are handled.

(Example logic / code extract): surround two lines of already-positioned text with a background frame:
{{{

Tw, Th = soloFont.getStringSize(text1,txtSize)
Tw2, Th2 = soloFont.getStringSize(text2,txtSize)

#MFH - scale and display self.soloFrame behind / around the text
if self.soloFrame:
  frameWidth = (max(Tw,Tw2))*1.15
  frameHeight = (Th+Th2)*1.05
  boxXOffset = 0.5
  #MFH - font Y position = top of text to be written
  boxYOffset = self.hPlayer[i]-(self.wFull* (yOffset+(frameHeight/1.97)) )
  self.soloFrame.transform.reset()
  tempWScale = frameWidth*self.soloFrameWFactor
  tempHScale = -(frameHeight)*self.soloFrameWFactor
  self.soloFrame.transform.scale(tempWScale,tempHScale)
  self.soloFrame.transform.translate(self.wPlayer[i]*boxXOffset,boxYOffset)
  self.soloFrame.draw()

soloFont.render(text1, (0.5 - Tw/2, yOffset),(1, 0, 0),txtSize)   #centered
soloFont.render(text2, (0.5 - Tw2/2, yOffset+Th+txtSize),(1, 0, 0),txtSize)   #centered

}}}

*NOTE* - With the impending implementation of the Lamina library in 3.035, rendering text will make a LOT more sense!