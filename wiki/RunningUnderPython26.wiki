#summary How to set up a Python 2.6 environment for FoFiX.
#labels Phase-Implementation
<wiki:toc max_depth="2" />
= Introduction =

FoFiX and its predecessors have been built upon Python 2.4 for quite some time.  However, 2.4 went into security-fix-only mode more than two years ago, and it has really started to show its age.  Thus, FoFiX is working on moving up to Python 2.6 while (for now) remaining compatible with 2.4.

If you would rather stick with the tried-and-true 2.4 instructions, see RequiredSourceModules.

= Setting up Python 2.6 and FoFiX Sources =

== Windows ==

First, you will need Python 2.6 itself.  Go to http://www.python.org/download/ and select the most recent 2.6.x release.  The most recent 2.6.x at the time of this writing is 2.6.1 (http://www.python.org/ftp/python/2.6.1/python-2.6.1.msi).  _Select the *32-bit* Windows binary installer, even if you have a 64-bit system._  Not all of the dependency modules are available for 64-bit systems.  Install by double-clicking the .msi file, but read the next paragraph before doing so.

You will need to add the Python installation folder to the PATH.  You can do this while the screen is showing in the installer that allows you to choose which folder Python will be installed to.  Select the folder name and copy it to the Clipboard.  Then open the Start menu, right-click on "My Computer" (XP/2003) or "Computer" (Vista/2008/Win7), and choose Properties.  Go to the Advanced tab, then click Environment Variables.  Under System Variables, find where the variable "PATH" (or "Path") is set, and double-click it to edit it.  Add a semicolon (;) to the end of the existing value, then paste the folder name in after it.  Click OK in each window until you are out of System Properties, then continue installing Python.

You will now need to download and install the dependency modules.  Versions are the most recent available at the time of this writing.  You may wish to check for more recent releases with the upstream developers of these packages.  If you do not use the links here, be sure you get 32-bit packages.

  # pyWin32 (build 213: http://downloads.sourceforge.net/pywin32/pywin32-213.win32-py2.6.exe)
  # numpy (1.3.0: http://downloads.sourceforge.net/numpy/numpy-1.3.0-win32-superpack-python2.6.exe)
  # pygame (svn trunk revision 1954: http://www.mediafire.com/file/dnynwa5iem3/pygame-1.9.0a0_r1954.win32-py2.6.msi)  Stable release 1.8.1 will not work; stable release 1.9.0 (when it comes out) will.
  # pyOpenGL (3.0.0: http://downloads.sourceforge.net/pyopengl/PyOpenGL-3.0.0.win32.exe)
  # Python Imaging Library (1.1.6: http://effbot.org/downloads/PIL-1.1.6.win32-py2.6.exe)
  # pyogg (1.3: http://www.mediafire.com/file/qlw2hwyy0rz/pyogg-1.3.win32-py2.6.exe)
  # pyvorbis (1.5a: http://www.mediafire.com/file/i21ewawljtw/pyvorbis-1.5.win32-py2.6.exe)

Install them in the order listed above by double-clicking the .exe or .msi files that you downloaded.

Acrox999 has put together [http://www.mediafire.com/?y02uniotmmt a package] containing required source modules to run FoFiX on Python 2.6 in a Windows environment.  Some have been updated since then, but the versions in the package should work also.

The following packages are optional:

  # psyco: Python JIT compiler (1.6: http://www.voidspace.org.uk/downloads/psyco-1.6.win32-py2.6.exe)  _Highly recommended!_
  # rtmidi: support for using MIDI instruments (svn revision 10: http://www.mediafire.com/file/njrzmkyztfg/rtmidi-0.1.win32-py2.6.exe)
  # py2exe: support for freezing the code into a standalone EXE (0.6.9: http://downloads.sourceforge.net/py2exe/py2exe-0.6.9.win32-py2.6.exe)
  # pitchbend: support for pitch bend effect (0.3-EndOfLife: http://www.mediafire.com/file/zlinjzzj0km/pitchbend-0.3-EndOfLife.win32-py2.6.exe)  _Will be replaced with a much better implementation soon enough..._

Install them in the order listed above by double-clicking the .exe or .msi files that you downloaded.

Note that the current FoFiX codebase under Python 2.6 no longer has some of the dependencies that it had under Python 2.4:

  # pysqlite2: replaced by sqlite3, which is included with all Python releases starting with Python 2.5 as part of the standard library.
  # glew/glewpy: while code that uses it still exists in FoFiX, there is currently no way for that code to be called from the rest of the game.
  # Numeric: obsolete, replaced by numpy.

You may need to modify one of the files in pyOpenGL.  Do so if you receive errors and the function name "glGenTextures" appears anywhere in the log.

  # Navigate to your Python installation folder, then go into lib/site-packages/OpenGL/GL.
  # Right-click "exceptional.py" and choose "Edit with IDLE".
  # Find the line that reads (at or around line 181)
    `textures = simple.GLuint( 0 )`
  # Replace it with
    `textures = arrays.GLuintArray.zeros( (1,))`
  # Two lines below that, find
    `return textures.value`
  # Replace it with
    `return simple.GLuint(textures[0]).value`
  # Be sure you do not change the amount of indentation of either line, as indentation is significant in Python.  If you are in doubt, the indentation of both should match up with the line between them (which you did not edit).
  # Save the file and exit IDLE.
  # Delete the files "exceptional.pyc" and "exceptional.pyo" in the same folder.

To obtain the FoFiX source code, you will need a Subversion client.  Download the most recent version of TortoiseSVN from http://tortoisesvn.net/downloads and double-click the .msi to install it.  _Be sure you obtain the correct package for your system.  If you have a 64-bit system, be *sure* to get the 64-bit version, and vice versa._  You will still be able to follow the rest of these steps without rebooting - a reboot is only needed to activate the icon overlay feature of TortoiseSVN.

Create an empty folder, right-click on it, and choose "SVN Checkout...".  For the URL of the repository, enter:

http://fofix.googlecode.com/svn/MFH-Mod/trunk/

You do not need to change any other options in the checkout window.  Click OK to download the FoFiX source code.

To run FoFiX from source, double-click "RunFofFromSources.bat" in the src/scripts folder within the source code.  If you installed py2exe, you can freeze the code into an EXE by double-clicking "RebuildWin.bat", also in src/scripts.  However, whether you are running from source or EXE has negligible impact on performance except while the game is just starting up, and even then there is practically no difference.  Thus, there really is no point in creating the EXE unless you are going to distribute FoFiX to others.

== Mac OS X ==

Fill in stuff here...

== GNU/Linux ==

Fill in stuff here...